
class Solution {
    public int[] sortArrayByParity(int[] A) {
        ArrayList<Integer> B = new ArrayList<Integer>();
        ArrayList<Integer> temp = new ArrayList<Integer>();
        int[] result = new int[A.length];
        for(int i = 0; i<A.length; i++){
            if(A[i]%2==0){
                B.add(A[i]);
            }
            else{
                temp.add(A[i]);
            }
        }
        for(Integer j:temp){
            B.add(j);
        }
        for(int k = 0; k<B.size();k++){
            result[k] = B.get(k);
        }
        return result;
    }
}
// method 2 
// 在array内部排序， 从两端向中间遍历，有不符合条件的就交换顺序，直至相遇
class Solution {
    public int[] sortArrayByParity(int[] A) {
        int i = 0;
        int j = A.length-1;
        while(i<j)
            {
                if(A[i]%2>A[j]%2){
                int temp = A[i];
                A[i] = A[j];
                A[j] = temp;
                    i++;
                    j--;
            }
            else if(A[i]%2==1&&A[j]%2==1){
                j--;
            }
            else if(A[i]%2==0&&A[j]%2==0){
                i++;
            }
            else{
                i++;
                j--;
            }
        }
       return A; 
    }
}
