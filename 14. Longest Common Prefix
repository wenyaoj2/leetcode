class Solution {
    public String longestCommonPrefix(String[] strs) {
        if(strs.length==0){
            return "";
        }
        String prefix = strs[0];
        for(int j = 1; j<strs.length;j++){
            while(strs[j].indexOf(prefix)!=0){
                prefix = prefix.substring(0,prefix.length()-1);
                if(prefix.length()==0){
                    return "";
                }
            }
        }
        return prefix;
    }
}

方法二二叉搜索法
class Solution {
    public String longestCommonPrefix(String[] strs) {
        if(strs.length==0){
            return "";
        }
        int low = 1;
        int high = strs[0].length();
        while(low<=high){
            int middle = (low+high)/2;
            if(common(strs,middle)){
                low = middle+1;
            }
            else{
                high = middle-1;
            }
        }
      return strs[0].substring(0,(low + high) / 2);  
    }
    public boolean common(String[] strs, int len){
        String str1 = strs[0].substring(0,len);
        for(int i = 0; i<strs.length;i++){
            if(!strs[i].startsWith(str1)){
                return false;
            }
        }
        return true;
    }
}
